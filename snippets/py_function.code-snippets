{
	"def get_timestamp": {
		"scope": "python",
		"prefix": "def get_timestamp",
		"body": [
			"def get_timestamp():",
			"\ttimestamp = datetime.datetime.now().strftime(\"%Y/%m/%d %H:%M:%S\")",
			"\treturn f\"[{timestamp}] {os.path.basename(__file__)}\""
		]
	},
	"argparser": {
		"scope": "python",
		"prefix": "def get_args",
		"body": [
			"def get_args():",
			"\tparser = argparse.ArgumentParser()",
			"\tparser.add_argument(",
			"\t\t\"-i\", \"--input\",",
			"\t\thelp=\"input\",",
			"\t\ttype=int,",
			"\t\trequired=False,",
			"\t\tdefault=0",
			"\t)",
			"\tparser.add_argument(",
			"\t\t\"-f\", \"--flag\",",
			"\t\thelp=\"flag\",",
			"\t\taction=\"store_true\"",
			"\t)",
			"\tparser.add_argument(",
			"\t\t\"-c\", \"--choices\",",
			"\t\thelp=\"choices\",",
			"\t\tchoices=[\"A\", \"B\", \"C\"],",
			"\t\trequired=False,",
			"\t\tdefault=\"A\"",
			"\t)",
			"\treturn parser.parse_args()"
		]
	},
	"def read_text": {
		"scope": "python",
		"prefix": "def read_text",
		"body": [
			"def read_text(filepath):",
			"\ttry:",
			"\t\twith open(filepath, \"r\") as f:",
			"\t\t\ttxt = f.read()",
			"\t\treturn txt",
			"\texcept:",
			"\t\traise"
		]
	},
	"def read_json": {
		"scope": "python",
		"prefix": "def read_json",
		"body": [
			"def read_json(filepath):",
			"\ttry:",
			"\t\twith open(filepath, \"r\", encoding=\"utf-8\") as f:",
			"\t\t\tdata = json.load(f)",
			"\t\treturn data",
			"\texcept:",
			"\t\traise"
		]
	},
	"def write_json": {
		"scope": "python",
		"prefix": "def write_json",
		"body": [
			"def write_json(filepath, data):",
			"\ttry:",
			"\t\twith open(filepath, \"w\", encoding=\"utf-8\") as f:",
			"\t\t\tjson.dump(data, f, indent=2, separators=(\",\", \": \"))",
			"\texcept:",
			"\t\traise"
		]
	},
	"def extract_table": {
		"scope": "python",
		"prefix": "def extract_table",
		"body": [
			"def extract_table(df, col, val):",
			"\treturn df.loc[df[col]==val].reset_index(drop=True)"
		]
	},
	"def extract_table(contain_str)": {
		"scope": "python",
		"prefix": "def extract_table(contain_str)",
		"body": [
			"def extract_table(df, col, val):",
			"\treturn df.loc[df[col].str.contains(val)].reset_index(drop=True)"
		]
	},
	"def drop_table": {
		"scope": "python",
		"prefix": "def drop_table",
		"body": [
			"def drop_table(df, col, val):",
			"\treturn df.loc[df[col]!=val].reset_index(drop=True)"
		]
	},
	"def unique_table": {
		"scope": "python",
		"prefix": "def unique_table",
		"body": [
			"def unique_table(df, col):",
			"\treturn df.loc[~df[col].duplicated()].reset_index(drop=True)"
		]
	},
	"def find_nearest_indices": {
		"scope": "python",
		"prefix": "def find_nearest_indices",
		"body": [
			"def find_nearest_indices(values, target):",
			"\tdiff = np.abs(values - target)",
			"\tmin_diff = np.min(diff)",
			"\treturn np.where(diff == min_diff)[0]"
		]
	},
	"def sigmoid": {
		"scope": "python",
		"prefix": "def sigmoid",
		"body": [
			"def sigmoid(x, gain=1.0, bias=0.0):",
			"\treturn 1 / (1 + np.exp(-gain * (x - bias)))"
		]
	},
	"def logit": {
		"scope": "python",
		"prefix": "def logit",
		"body": [
			"def logit(x, gain=1.0, bias=0.0):",
			"\treturn np.log(gain * (x - bias)) - np.log(1 - gain * (x - bias))"
		]
	},
	"def gamma_curve": {
		"scope": "python",
		"prefix": "def gamma_curve",
		"body": [
			"def gamma_curve(x, gamma=2.2):",
			"\treturn x**gamma"
		]
	},
	"def normalize": {
		"scope": "python",
		"prefix": "def normalize",
		"body": [
			"def normalize(x, x_min=None, x_max=None):",
			"\tx_min_ = x_min or np.nanmin(x)",
			"\tx_max_ = x_max or np.nanmax(x)",
			"\treturn (x - x_min_) / (x_max_ - x_min_)"
		]
	},
	"def encode_img_to_base64": {
		"scope": "python",
		"prefix": "def encode_img_to_base64",
		"body": [
			"def encode_img_to_base64(img: NDArray, ext: str = \".jpg\") -> str:",
			"\t_, img_bytes = cv2.imencode(ext, img)",
			"\treturn base64.b64encode(img_bytes.tobytes()).decode(\"utf-8\")"
		]
	},
	"def decode_base64_to_img": {
		"scope": "python",
		"prefix": "def decode_base64_to_img",
		"body": [
			"def decode_base64_to_img(img_base64: str) -> NDArray:",
			"\timg_bytes: bytes = base64.b64decode(img_base64.encode(\"utf-8\"))",
			"\treturn cv2.imdecode(np.frombuffer(img_bytes, dtype=np.uint8), cv2.IMREAD_COLOR)"
		]
	}
}
