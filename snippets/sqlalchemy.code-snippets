{
	"SQL_Engine": {
		"scope": "python",
		"prefix": "sql_engine",
		"body": [
			"SqlEngine: Engine = sqlalchemy.create_engine($0)"
		]
	},
	"SQL_Session": {
		"scope": "python",
		"prefix": "sql_session",
		"body": [
			"session: Session = sessionmaker(SqlEngine)()"
		]
	},
	"SQL_ORMapper": {
		"scope": "python",
		"prefix": "sql_ormapper",
		"body": [
			"Base: DeclarativeMeta = declarative_base()",
			"class ORMapper(Base):",
			"\t__tablename__ = $0",
			"\tid: Mapped[int] = Column(Integer, primary_key=True, unique=True)",
			"\tname: Mapped[str] = Column(String, nullable=False)",
			"\tcreated_at: Mapped[datetime.date] = Column(Date)"
		]
	},
	"SQL_create_table": {
		"scope": "python",
		"prefix": "sql_create_table",
		"body": [
			"Base.metadata.create_all(SqlEngine)"
		]
	},
	"SQL_Insert": {
		"scope": "python",
		"prefix": "sql_insert",
		"body": [
			"session.add($0)",
			"session.commit()"
		]
	},
	"SQL_Select": {
		"scope": "python",
		"prefix": "sql_select",
		"body": [
			"session.query(${1:ORMClass}).all()"
		]
	},
	"SQL_Select(where)": {
		"scope": "python",
		"prefix": "sql_select(where)",
		"body": [
			"session.query(${1:ORMClass}).filter().all()"
		]
	},
	"SqlInterface": {
		"scope": "python",
		"prefix": "SqlInterface",
		"body": [
			"class SqlInterface:",
			"\tdef __init__(self, ORMapper: DeclarativeMeta, logger: Logger | None = None) -> None:",
			"\t\t# logger",
			"\t\tself.logger: Logger = logger or null_logger",
			"\t\t# const",
			"\t\tself.db_url: str = \"<>:///<path>\"",
			"\t\tself.ORMapper: DeclarativeMeta = ORMapper",
			"\t\tself.SqlEngine: Engine = sqlalchemy.create_engine(self.db_url)",
			"\t\tself.session: Session = sessionmaker(self.SqlEngine)()",
			"",
			"\tdef read(self, colname: str = "", filter_vals: list[str] = []) -> pd.DataFrame:",
			"\t\tquery: str = self.create_query(",
			"\t\t\tself.ORMapper.__tablename__, colname, filter_vals)",
			"\t\tdf: pd.DataFrame = pd.read_sql(sql=query, con=self.SqlEngine)",
			"\t\treturn df",
			"",
			"\t@staticmethod",
			"\tdef create_query(",
			"\t\ttablename: str,",
			"\t\tcolname: str = "",",
			"\t\tfilter_vals: list[str] = []",
			"\t) -> str:",
			"\t\tquery: str = f\"select * from {tablename}\"",
			"\t\tif (colname!=\"\") and (len(filter_vals)>=1):",
			"\t\t\tquery += f\" where {colname} in ({','.join(filter_vals)})\"",
			"\t\tquery += \";\"",
			"\t\treturn query",
			"",
			"\tdef write(self, df: pd.DataFrame) -> None:",
			"\t\tbulk: dict[str, Any] = df.to_dict(orient=\"records\")",
			"\t\ttry:",
			"\t\t\tfor b in bulk:",
			"\t\t\t\trecord: DeclarativeMeta = self.extract_record(b[primary_key])",
			"\t\t\t\tif record is None:",
			"\t\t\t\t\tself.insert_record(b)",
			"\t\t\t\t\tcontinue",
			"\t\t\t\tself.update_record(record, b)",
			"\t\t\tself.session.commit()",
			"\t\texcept:",
			"\t\t\tself.logger.warning(\"Session was rollbacked.\")",
			"\t\t\tself.session.rollback()",
			"\t\t\traise",
			"",
			"\tdef extract_record(self, primary_key_value: Any) -> DeclarativeMeta:",
			"\t\ttry:",
			"\t\t\trecord: DeclarativeMeta = self.session.query(self.ORMapper).filter(",
			"\t\t\t\tself.ORMapper.primary_key==primary_key_value).one_or_none()",
			"\t\texcept:",
			"\t\t\tself.logger.warning(f\"primarykey:{primary_key_value} is duplicated.\")",
			"\t\t\traise",
			"\t\treturn record",
			"",
			"\tdef insert_record(self, values: dict[str, Any]) -> None:",
			"\t\ttry:",
			"\t\t\tself.session.add(self.ORMapper(**values))",
			"\t\texcept:",
			"\t\t\tself.logger.warning(\"insert_record failed. Make session rollback!\")",
			"\t\t\traise",
			"",
			"\tdef update_record(self, record: DeclarativeMeta, values: dict[str, Any]) -> None:",
			"\t\ttry:",
			"\t\t\t# update record",
			"\t\t\tpass",
			"\t\texcept:",
			"\t\t\tself.logger.warning(\"update_record failed. Make session rollback!\")",
			"\t\t\traise"
		]
	}
}
