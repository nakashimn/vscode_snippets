{
	"matplotlib.pyplot.figure": {
		"scope": "python",
		"prefix": "fig",
		"body": [
			"fig = plt.figure(figsize=[${1:width}, ${2:height}], tight_layout=True)",
			"axes = fig.add_subplot(1, 1, 1)"
		]
	},
	"matplotlib.pyplot.figure(grid)": {
		"scope": "python",
		"prefix": "fig(grid)",
		"body": [
			"fig = plt.figure(figsize=[${1:width}, ${2:height}], tight_layout=True)",
			"axes = [fig.add_subplot(${3:rows}, ${4:cols}, i+1) for i in range(${5:rows*cols})]"
		]
	},
	"matplotlib.pyplot.rcParams": {
		"scope": "python",
		"prefix": "plt.rcParams",
		"body": [
			"plt.rcParams[\"font.size\"] = ${1:20}",
			"plt.rcParams[\"font.family\"] = \"${2:MS Gothic}\""
		]
	},
	"matplotlib.pyplot.cmap": {
		"scope": "python",
		"prefix": "cmap",
		"body": [
			"plt.get_cmap(\"${1|tab20,tab20b,tab20c,Pastel1,Pastel2|}\")"
		],
		"description": "params example : tab20, tab20b, tab20c, Pastel1, Pastel2"
	},
	"plt.imshow": {
		"scope": "python",
		"prefix": ["plt.imshow", "plt_imshow", "imshow"],
		"body": [
			"plt.imshow(${TM_SELECTED_TEXT}$0)"
		]
	},
	"plt.hist": {
		"scope": "python",
		"prefix": ["plt.hist", "plt_hist", "hist"],
		"body": [
			"plt.hist(${TM_SELECTED_TEXT}$0, bins=30, ec=\"black\", alpha=0.5)"
		]
	},
	"plt.hist(compared)": {
		"scope": "python",
		"prefix": ["plt.hist(compared)", "plt_hist(compared)", "hist(compared)"],
		"body": [
			"bin_width = 0.1",
			"bins = np.arange(0, 1, bin_width)",
			"plt.hist($0, bins=bins, ec=\"black\", alpha=0.5, align=\"mid\", width=bin_width/2)",
			"plt.hist(, bins=bins, ec=\"black\", alpha=0.5, align=\"right\", width=bin_width/2)"
		]
	},
	"colormap(Office)": {
		"scope": "python",
		"prefix": "Colormap(Office)",
		"body": [
			"ListedColormap([",
			"\t(0.357, 0.608, 0.835, 1.000),",
			"\t(0.929, 0.490, 0.192, 1.000),",
			"\t(0.647, 0.647, 0.647, 1.000),",
			"\t(1.000, 0.753, 0.000, 1.000),",
			"\t(0.267, 0.447, 0.769, 1.000),",
			"\t(0.439, 0.678, 0.275, 1.000),",
			"], name=\"Office\")"
		]
	},
	"colormap(Office2007-2010)": {
		"scope": "python",
		"prefix": "Colormap(Office2007-2010)",
		"body": [
			"ListedColormap([",
			"\t(0.310, 0.506, 0.741, 1.000),",
			"\t(0.753, 0.314, 0.302, 1.000),",
			"\t(0.608, 0.733, 0.349, 1.000),",
			"\t(0.502, 0.392, 0.635, 1.000),",
			"\t(0.294, 0.675, 0.776, 1.000),",
			"\t(0.969, 0.588, 0.275, 1.000),",
			"], name=\"Office2007-2010\")"
		]
	},
	"colormap(Office2007-2010_dim)": {
		"scope": "python",
		"prefix": "Colormap(Office2007-2010, dim)",
		"body": [
			"ListedColormap([",
			"\t(0.212, 0.376, 0.573, 1.000),",
			"\t(0.588, 0.212, 0.204, 1.000),",
			"\t(0.463, 0.576, 0.235, 1.000),",
			"\t(0.376, 0.286, 0.478, 1.000),",
			"\t(0.192, 0.525, 0.608, 1.000),",
			"\t(0.886, 0.420, 0.039, 1.000),",
			"], name=\"Office2007-2010_dim\")"
		]
	},
	"colormap(Office2007-2010_dark)": {
		"scope": "python",
		"prefix": "Colormap(Office2007-2010, dark)",
		"body": [
			"ListedColormap([",
			"\t(0.141, 0.251, 0.384, 1.000),",
			"\t(0.388, 0.145, 0.137, 1.000),",
			"\t(0.310, 0.384, 0.157, 1.000),",
			"\t(0.251, 0.192, 0.318, 1.000),",
			"\t(0.129, 0.349, 0.404, 1.000),",
			"\t(0.592, 0.278, 0.024, 1.000),",
			"], name=\"Office2007-2010_dark\")"
		]
	},
	"colormap(Grey)": {
		"scope": "python",
		"prefix": "Colormap(Grey)",
		"body": [
			"ListedColormap([",
			"\t(v, v, v, 1.0) for v in np.arange(0.15, 1.0, 0.15)",
			"], name=\"Grey\")"
		]
	},
	"axes.set": {
		"scope": "python",
		"prefix": ["axes.set", "axes_set"],
		"body": [
			"axes.set_xlim($1)",
			"axes.set_ylim($2)",
			"axes.set_xlabel($3)",
			"axes.set_ylabel($4)",
			"axes.set_axisbelow(True)",
			"axes.grid(visible=True, axis=\"y\")"
		]
	},
	"axes.grid(y)": {
		"scope": "python",
		"prefix": "axes.grid.y",
		"body": [
			"axes.set_axisbelow(True)",
			"axes.grid(visible=True, axis=\"y\")"
		]
	},
	"def draw_plot": {
		"scope": "python",
		"prefix": "def draw_plot",
		"body": [
			"def draw_plot(",
			"\taxes,",
			"\tx,",
			"\ty,",
			"\tmarker=${1|\".\",\"o\"|},",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolor=None,",
			"\talpha=None,",
			"\tgrid=\"y\",",
			"\tlabel=None",
			"):",
			"\taxes.plot(x, y, marker=marker, color=color, alpha=alpha, label=label)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
	"def draw_scatter": {
		"scope": "python",
		"prefix": "def draw_scatter",
		"body": [
			"def draw_scatter(",
			"\taxes,",
			"\tx,",
			"\ty,",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolor=None,",
			"\talpha=None,",
			"\tgrid=\"both\",",
			"\tlabel=None",
			"):",
			"\taxes.scatter(x, y, color=color, alpha=alpha, label=label)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
	"def draw_hist": {
		"scope": "python",
		"prefix": "def draw_hist",
		"body": [
			"def draw_hist(",
			"\taxes,",
			"\tvals,",
			"\tbins=None,",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolor=None,",
			"\talpha=None,",
			"\tec=\"gray\",",
			"\tgrid=\"y\",",
			"\tlabel=None",
			"):",
			"\taxes.hist(vals, bins=bins, color=color, alpha=alpha, ec=ec, label=label)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
	"def draw_bar": {
		"scope": "python",
		"prefix": "def draw_bar",
		"body": [
			"def draw_bar(",
			"\taxes,",
			"\tx,",
			"\ty,",
			"\twidth=0.8,",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolor=None,",
			"\talpha=None,",
			"\tec=None,",
			"\talign=${1|\"center\",\"edge\"|},",
			"\tgrid=\"y\",",
			"\tlabel=None",
			"):",
			"\taxes.bar(x, y, width=width, color=color, alpha=alpha, ec=ec, align=align, label=label)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
	"def draw_bar_multi": {
		"scope": "python",
		"prefix": "def draw_bar_multi",
		"body": [
			"def draw_bar_multi(",
			"\taxes,",
			"\tx,",
			"\tys,",
			"\twidth=0.8,",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolors=None,",
			"\talpha=None,",
			"\tec=None,",
			"\talign=${1|\"center\",\"edge\"|},",
			"\tgrid=\"y\",",
			"\tlabel=None",
			"):",
			"\tpos_x = np.arange(len(x)) + 1",
			"\tcolors_ = colors if colors is not None else [None for _ in ys]",
			"\tfor i, y in enumerate(ys):",
			"\t\tpos = pos_x - width * (1 - (2 * i + 1) / len(ys)) / 2",
			"\t\taxes.bar(pos, y, width=width/len(ys), color=colors_[i], alpha=alpha, ec=ec, label=label)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\tif align == \"center\":",
			"\t\taxes.set_xticks(pos_x, x)",
			"\tif align == \"edge\":",
			"\t\taxes.set_xticks(pos_x - 0.5, x)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
	"def draw_bar_stack": {
		"scope": "python",
		"prefix": "def draw_bar_stack",
		"body": [
			"def draw_bar_stack(",
			"\taxes,",
			"\tx,",
			"\tys,",
			"\twidth=0.8,",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolors=None,",
			"\talpha=None,",
			"\tec=None,",
			"\talign=${1|\"center\",\"edge\"|},",
			"\tgrid=\"y\",",
			"\tlabel=None",
			"):",
			"\tcolors_ = colors if colors is not None else [None for _ in ys]",
			"\tbottoms_ = np.cumsum(ys, axis=0)",
			"\tfor i, y in enumerate(ys):",
			"\t\tbottom = bottoms_[i-1] if i >= 1 else None",
			"\t\taxes.bar(x, y, width=width, color=colors_[i], alpha=alpha, ec=ec, align=align, label=label, bottom=bottom)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
	"def draw_bar_multistack": {
		"scope": "python",
		"prefix": "def draw_bar_multistack",
		"body": [
			"def draw_bar_multistack(",
			"\taxes,",
			"\tx,",
			"\tyss,",
			"\twidth=0.8,",
			"\txlim=None,",
			"\tylim=None,",
			"\txlabel=None,",
			"\tylabel=None,",
			"\tcolors=None,",
			"\talpha=None,",
			"\tec=None,",
			"\talign=${1|\"center\",\"edge\"|},",
			"\tgrid=\"y\",",
			"\tlabel=None",
			"):",
			"\tpos_x = np.arange(len(x)) + 1",
			"\tcolorss_ = colors if colors is not None else [[None for _ in ys] for ys in yss]",
			"\tbottomss_ = np.cumsum(yss, axis=0)",
			"\tfor i, ys in enumerate(yss):",
			"\t\tcolors_ = colorss_[i]",
			"\t\tbottoms_ = bottomss_[i-1] if i >= 1 else None",
			"\t\tfor j, y in enumerate(ys):",
			"\t\t\tpos = pos_x - width * (1 - (2 * j + 1) / len(ys)) / 2",
			"\t\t\tbottom_ = bottoms_[j] if bottoms_ is not None else None",
			"\t\t\taxes.bar(pos, y, width=width/len(ys), color=colors_[j], alpha=alpha, ec=ec, label=label, bottom=bottom_)",
			"\taxes.set_xlim(xlim)",
			"\taxes.set_ylim(ylim)",
			"\taxes.set_xlabel(xlabel)",
			"\taxes.set_ylabel(ylabel)",
			"\tif align == \"center\":",
			"\t\taxes.set_xticks(pos_x, x)",
			"\tif align == \"edge\":",
			"\t\taxes.set_xticks(pos_x - 0.5, x)",
			"\taxes.set_axisbelow(True)",
			"\tif grid is not None:",
			"\t\taxes.grid(visible=True, axis=grid)",
			"\treturn axes"
		]
	},
}
